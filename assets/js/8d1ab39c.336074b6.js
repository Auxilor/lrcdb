"use strict";(self.webpackChunkauxilor_docs=self.webpackChunkauxilor_docs||[]).push([[5136],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4950:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),l=["components"],i={title:"How to make a custom pet",sidebar_position:2},s=void 0,p={unversionedId:"ecopets/how-to-make-a-custom-pet",id:"ecopets/how-to-make-a-custom-pet",title:"How to make a custom pet",description:"Default config",source:"@site/docs/ecopets/how-to-make-a-custom-pet.md",sourceDirName:"ecopets",slug:"/ecopets/how-to-make-a-custom-pet",permalink:"/ecopets/how-to-make-a-custom-pet",editUrl:"https://github.com/Auxilor/docs/tree/main/packages/create-docusaurus/templates/shared/docs/ecopets/how-to-make-a-custom-pet.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"How to make a custom pet",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Commands and Permissions",permalink:"/ecopets/commands-and-permissions"},next:{title:"PlaceholderAPI",permalink:"/ecopets/placeholderapi"}},c={},u=[{value:"Default config",id:"default-config",level:2},{value:"How to add pets",id:"how-to-add-pets",level:2},{value:"Typical Pet Config",id:"typical-pet-config",level:2},{value:"Understanding all the sections",id:"understanding-all-the-sections",level:2},{value:"Effects + Conditions",id:"effects--conditions",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"default-config"},"Default config"),(0,r.kt)("p",null,"The default configs can be found here:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Auxilor/EcoPets/blob/master/eco-core/core-plugin/src/main/resources/pets/"},"GitHub")),(0,r.kt)("h2",{id:"how-to-add-pets"},"How to add pets"),(0,r.kt)("p",null,"Pets are each config files placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/pets/")," folder, and you can add or remove them as you please. There's an example config called ",(0,r.kt)("inlineCode",{parentName:"p"},"_example.yml")," to help you out!"),(0,r.kt)("h2",{id:"typical-pet-config"},"Typical Pet Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# The display name of the pet\nname: "&6Tiger"\n\n# The description of the pet\ndescription: "&8&oLevel up by dealing melee damage"\n\n# The xp requirements for each pet level - add new levels by adding more to this list\nlevel-xp-requirements:\n  - 50\n  - 125\n  - 200\n  - 300\n  - 500\n  - 750\n  - 1000\n  - 1500\n  - 2000\n  - 3500\n  - 5000\n  - 7500\n  - 10000\n  - 15000\n  - 20000\n  - 30000\n  - 50000\n  - 75000\n  - 100000\n  - 200000\n  - 300000\n  - 400000\n  - 500000\n  - 600000\n  - 700000\n  - 800000\n  - 900000\n  - 1000000\n  - 1100000\n  - 1200000\n  - 1300000\n  - 1400000\n  - 1500000\n  - 1600000\n  - 1700000\n  - 1800000\n  - 1900000\n  - 2000000\n  - 2100000\n  - 2200000\n  - 2300000\n  - 2400000\n  - 2500000\n  - 2600000\n  - 2750000\n  - 2900000\n  - 3100000\n  - 3400000\n  - 3700000\n\n# An XP Gain method takes a trigger as the ID and a multiplier\n# The multiplier takes the value produced by the trigger and multiplies it\n# by some value to calculate the experience that should be given\nxp-gain-methods:\n  - id: melee_attack\n    multiplier: 0.5\n\n# Custom placeholders to be used in descriptions,\n# Don\'t add % to the IDs, this is done automatically\n# The value takes a %level% placeholder and is a mathetmatical expression\nlevel-placeholders:\n  - id: "damage_multiplier"\n    value: "%level%"\n\n# The text shown with the %effects% placeholder\n# The number dictates the minimum level for this text to show for\n# Adding new levels will override this text on those levels or above\neffects-description:\n  1:\n    - "&8\xbb &8Gives a &a+%damage_multiplier%%&8 bonus to"\n    - "   &8melee damage"\n\n# Same as above, but for %rewards%\nrewards-description:\n  1:\n    - "&8\xbb &8Gives a &a+%damage_multiplier%%&8 bonus to"\n    - "   &8melee damage"\n\n# Same as above, but for %level_up_messages%\nlevel-up-messages:\n  1:\n    - "&8\xbb &8Gives a &a+%damage_multiplier%%&8 bonus to"\n    - "   &8melee damage"\n\n# Commands to be sent on levelup, can be formatted two ways:\n# level:command (e.g. 10:eco give %player% 1000), which would execute that command for level 10\n# command (e.g. eco give %player% 5000), which would execute that command for all levels\nlevel-commands: [ ]\n\n# The effects for the pet, has %level% as a placeholder\neffects:\n  - id: damage_multiplier\n    args:\n      multiplier: "%level% * 0.01 + 1"\n    triggers:\n      - melee_attack\n\n# The conditions for the pet, also has %level% as a placeholder\nconditions: [ ]\n\n# The texture of the pet entity in game\n# If you\'re using modelengine, use modelengine:id as the texture\nentity-texture: "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTA5NWZjYzFlM2Q3Y2JkMzUwZjE5YjM4OTQ5OGFiOGJiOTZjNjVhZDE4NWQzNDU5MjA2N2E3ZDAzM2FjNDhkZSJ9fX0="\nmodelengine-animation: "fly" # If you\'re using ModelEngine, you can specify an animation here; you can leave this out if you\'re not.\n\n# The icon in GUIs\nicon: player_head texture:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTA5NWZjYzFlM2Q3Y2JkMzUwZjE5YjM4OTQ5OGFiOGJiOTZjNjVhZDE4NWQzNDU5MjA2N2E3ZDAzM2FjNDhkZSJ9fX0=\n\n# The spawn egg\nspawn-egg:\n  enabled: true # If the pet should have a spawn egg\n  item: blaze_spawn_egg unbreaking:1 hide_enchants\n  name: "&6Tiger&f Spawn Egg"\n  lore:\n    - ""\n    - "&8&oPlace on the ground to"\n    - "&8&ounlock the &r&6Tiger&8&o pet!"\n  craftable: false\n  recipe: [ ]\n  # recipe-permission: ecopets.craft.tiger\n')),(0,r.kt)("h2",{id:"understanding-all-the-sections"},"Understanding all the sections"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"id:")," The ID of the pet. This is what you use in commands - ID's must be lowercase letters, numbers, and underscores only."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"name:")," The name of the pet, shown to the player."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"description:")," The description of the pet, helpful to show how it's levelled."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-xp-requirements:")," The XP requirements for each level"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"xp-gain-methods:")," The way the pet can be levelled. Each ID is a trigger - triggers give values such as damage dealt (with attack triggers), distance moved (with the move trigger), et cetera. Other triggers with no obvious value give an output of 1."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-placeholders:")," Custom placeholders for messages / lore"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"effects-description:")," Pet specific effect descriptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"rewards-description:")," Pet specific reward descriptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-up-messages:")," Pet specific level up messages"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-commands:")," Commands to be executed on levelup "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"entity-texture:")," The texture of the pet that follows you around. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"modelengine:<id>")," if you're using Model Engine"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"modelengine-animation:")," If you're using Model Engine, you can supply an animation here"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"icon:")," The GUI icon"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"spawn-egg:")," Config for the spawn egg"),(0,r.kt)("h3",{id:"effects--conditions"},"Effects + Conditions"),(0,r.kt)("p",null,"Effects are the actual functionality of the pet, and conditions are requirements that a player must meet for the pet to activate for them - so you can make it so a pet only works for a certain type of player, ie only players that have above a certain amount of playtime, or those that only have below a certain balance."),(0,r.kt)("p",null,"See this page for how to configure effects:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/effects/configuring-an-effect"},"Configuring an Effect")))}d.isMDXComponent=!0}}]);