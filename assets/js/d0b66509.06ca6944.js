"use strict";(self.webpackChunkauxilor_docs=self.webpackChunkauxilor_docs||[]).push([[2952],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return t?o.createElement(f,l(l({ref:n},u),{},{components:t})):o.createElement(f,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1099:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],i={title:"How to make a custom job",sidebar_position:2},s=void 0,c={unversionedId:"ecojobs/how-to-make-a-custom-job",id:"ecojobs/how-to-make-a-custom-job",title:"How to make a custom job",description:"Default config",source:"@site/docs/ecojobs/how-to-make-a-custom-job.md",sourceDirName:"ecojobs",slug:"/ecojobs/how-to-make-a-custom-job",permalink:"/ecojobs/how-to-make-a-custom-job",editUrl:"https://github.com/Auxilor/docs/tree/main/packages/create-docusaurus/templates/shared/docs/ecojobs/how-to-make-a-custom-job.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"How to make a custom job",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Commands and Permissions",permalink:"/ecojobs/commands-and-permissions"},next:{title:"PlaceholderAPI",permalink:"/ecojobs/placeholderapi"}},u={},p=[{value:"Default config",id:"default-config",level:2},{value:"How to add jobs",id:"how-to-add-jobs",level:2},{value:"Typical Job Config",id:"typical-job-config",level:2},{value:"Understanding all the sections",id:"understanding-all-the-sections",level:2},{value:"Effects + Conditions",id:"effects--conditions",level:3}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"default-config"},"Default config"),(0,r.kt)("p",null,"The default configs can be found here:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Auxilor/EcoJobs/blob/master/eco-core/core-plugin/src/main/resources/jobs/"},"GitHub")),(0,r.kt)("h2",{id:"how-to-add-jobs"},"How to add jobs"),(0,r.kt)("p",null,"Jobs are each config files placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/jobs/")," folder, and you can add or remove them as you please. There's an example config called ",(0,r.kt)("inlineCode",{parentName:"p"},"_example.yml")," to help you out!"),(0,r.kt)("h2",{id:"typical-job-config"},"Typical Job Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# The display name of the job\nname: "&6Miner"\n\n# The description of the job\ndescription: "&8&oLevel up by mining blocks"\n\n# If the job should be unlocked by default\nunlocked-by-default: true\n\n# The xp requirements for each job level - add new levels by adding more to this list\nlevel-xp-requirements:\n  - 100\n  - 120\n  - 150\n  - 180\n  - 210\n  - 250\n  - 300\n  - 360\n  - 430\n  - 520\n  - 620\n  - 740\n  - 890\n  - 1000\n  - 1300\n  - 1500\n  - 1900\n  - 2200\n  - 2700\n  - 3200\n  - 3800\n  - 4600\n  - 5500\n  - 6600\n  - 7900\n  - 9500\n  - 11500\n  - 14000\n  - 17000\n  - 19000\n  - 24000\n  - 29000\n  - 34000\n  - 41000\n  - 50000\n  - 60000\n  - 70000\n  - 85000\n  - 100000\n  - 120000\n  - 150000\n  - 180000\n  - 210000\n  - 250000\n  - 300000\n  - 360000\n  - 440000\n  - 580000\n  - 750000\n\n# An XP Gain method takes a trigger, a multiplier, conditions, and filters.\n# The multiplier takes the value produced by the trigger and multiplies it\n# by some value to calculate the experience that should be given\nxp-gain-methods:\n  - trigger: mine_block\n    multiplier: 0.5\n    conditions: [ ]\n    filters:\n      items:\n        - "*wooden_pickaxe"\n        - "*stone_pickaxe"\n        - "*iron_pickaxe"\n        - "*golden_pickaxe"\n        - "*diamond_pickaxe"\n        - "*netherite_pickaxe"\n\n# Custom placeholders to be used in descriptions,\n# Don\'t add % to the IDs, this is done automatically\n# The value takes a %level% placeholder and is a mathematical expression\nlevel-placeholders:\n  - id: "money"\n    value: "%level% * 0.4"\n  - id: "blocks"\n    value: "ceil(10 - %level% / 10)"\n\n# The text shown with the %effects% placeholder\n# The number dictates the minimum level for this text to show for\n# Adding new levels will override this text on those levels or above\neffects-description:\n  1:\n    - "&8\xbb &8Earn &a$%money%&8 for each &a%blocks%&8 blocks mined"\n\n# Same as above, but for %rewards%\nrewards-description:\n  1:\n    - "&8\xbb &8Earn &a$%money%&8 for each &a%blocks%&8 blocks mined"\n\n# Same as above, but for %level_up_messages%\nlevel-up-messages:\n  1:\n    - "&8\xbb &8Earn &a$%money%&8 for each &a%blocks%&8 blocks mined"\n\n# Commands to be sent on levelup, can be formatted two ways:\n# level:command (e.g. 10:eco give %player% 1000), which would execute that command for level 10\n# command (e.g. eco give %player% 5000), which would execute that command for all levels\nlevel-commands: [ ]\n\n# The effects for the job, has %level% as a placeholder\neffects:\n  - id: give_money\n    args:\n      every: "ceil(10 - %level% / 10)"\n      amount: "0.4 * %level%"\n    filters:\n      items:\n        - "*wooden_pickaxe"\n        - "*stone_pickaxe"\n        - "*iron_pickaxe"\n        - "*golden_pickaxe"\n        - "*diamond_pickaxe"\n        - "*netherite_pickaxe"\n    triggers:\n      - mine_block\n\n# The conditions for the job, also has %level% as a placeholder\nconditions: [ ]\n\n# The icon in GUIs\nicon: player_head texture:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvODU3MDVjZjg2NGRmMmMxODJlMzJjNDg2YjcxNDdjYmY3ODJhMGFhM2RmOGE2ZDYxNDUzOTM5MGJmODRmYjE1ZCJ9fX0=\n')),(0,r.kt)("h2",{id:"understanding-all-the-sections"},"Understanding all the sections"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"id:")," The ID of the job. This is what you use in commands - ID's must be lowercase letters, numbers, and underscores only."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"name:")," The name of the job, shown to the player."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"description:")," The description of the job, helpful to show how it's levelled."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"unlocked-by-default:")," If the job should be available to all players by default, or if they should have to unlock it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-xp-requirements:")," The XP requirements for each level"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"xp-gain-methods:")," The way the job can be levelled. Each ID is a trigger - triggers give values such as damage dealt (with attack triggers), distance moved (with the move trigger), et cetera. Other triggers with no obvious value give an output of 1."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-placeholders:")," Custom placeholders for messages / lore"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"effects-description:")," Job specific effect descriptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"rewards-description:")," Job specific reward descriptions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-up-messages:")," Job specific level up messages"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"level-commands:")," Commands to be executed on levelup "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"icon:")," The GUI icon"),(0,r.kt)("h3",{id:"effects--conditions"},"Effects + Conditions"),(0,r.kt)("p",null,"Effects are the actual functionality of the job, and conditions are requirements that a player must meet for the job to activate for them - so you can make it so a job only works for a certain type of player, ie only players that have above a certain amount of playtime, or those that only have below a certain balance."),(0,r.kt)("p",null,"See this page for how to configure effects:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/effects/configuring-an-effect"},"Configuring an Effect")))}m.isMDXComponent=!0}}]);